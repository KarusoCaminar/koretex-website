// --- Code für Setze Sample-Info (100% KORREKT) ---

console.log('🔍 [Setze Sample-Info] Start');
console.log('📦 $binary vorhanden:', !!$binary);
console.log('📦 $json:', JSON.stringify($json, null, 2));

// Sample-Parameter
const sample = String($json.query?.sample || '').trim();
console.log('📝 Sample:', sample || 'Upload');

let binaryData = null;

// FALL 1: Input kommt von "Lade Sample X" → $binary hat die Daten
if ($binary && typeof $binary === 'object') {
    const binaryKeys = Object.keys($binary);
    if (binaryKeys.length > 0) {
        binaryData = $binary;
        console.log('✅ Binary vom aktuellen Item (von Lade Sample X):', binaryKeys);
    }
}

// FALL 2: Input kommt von "Ist Sample?" (False Branch) → KEINE Binary-Daten!
// ABER: Wenn sample vorhanden ist, wurde "Lade Sample X" bereits im True Branch ausgeführt!
// → Hole Binary von "Lade Sample X" Node!
if (!binaryData && sample) {
    console.log('⚠️ Input kommt von "Ist Sample?" False Branch - hole Binary von "Lade Sample X"');
    try {
        let nodeName = null;
        if (sample === '1') nodeName = 'Lade Sample 1';
        else if (sample === '2') nodeName = 'Lade Sample 2';
        else if (sample === '3') nodeName = 'Lade Sample 3';
        
        if (nodeName) {
            console.log('🔍 Hole Binary von:', nodeName);
            const node = $(nodeName);
            
            // Versuche verschiedene Binary-Strukturen
            if (node?.binary) {
                binaryData = node.binary;
                console.log('✅ Binary von', nodeName, '(binary)');
            } else if (node?.item?.binary) {
                binaryData = node.item.binary;
                console.log('✅ Binary von', nodeName, '(item.binary)');
            } else if (node?.item?.binary?.data) {
                binaryData = node.item.binary;
                console.log('✅ Binary von', nodeName, '(item.binary.data)');
            } else {
                console.error('❌ Node', nodeName, 'hat keine Binary-Daten gefunden');
                console.error('📋 Node:', node);
            }
        }
    } catch (e) {
        console.error('❌ Fehler beim Holen von', nodeName, ':', e.message);
        console.error('📋 Error Stack:', e.stack);
    }
}

// FALL 3: Upload (kein sample Parameter) → Binary vom Webhook
if (!binaryData && !sample) {
    console.log('📤 Upload: Hole Binary vom Webhook');
    try {
        const webhook = $('Business Card Upload');
        if (webhook?.binary) {
            binaryData = webhook.binary;
            console.log('✅ Binary vom Webhook (binary)');
        } else if (webhook?.item?.binary) {
            binaryData = webhook.item.binary;
            console.log('✅ Binary vom Webhook (item.binary)');
        } else if (webhook?.item?.binary?.data) {
            binaryData = webhook.item.binary;
            console.log('✅ Binary vom Webhook (item.binary.data)');
        } else {
            console.error('❌ Webhook hat keine Binary-Daten');
        }
    } catch (e) {
        console.error('❌ Fehler beim Holen vom Webhook:', e.message);
    }
}

// KRITISCH: Prüfe ob Binary vorhanden ist
if (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData).length === 0)) {
    console.error('❌ KRITISCH: KEINE Binary-Daten gefunden!');
    console.error('📝 Sample:', sample);
    console.error('📦 $binary:', $binary);
    console.error('📦 binaryData:', binaryData);
    console.error('📋 Input JSON:', JSON.stringify($json, null, 2));
    
    // ERROR: Wirf einen Fehler mit detaillierter Info
    throw new Error(`Binary-Daten fehlen! Sample: "${sample || 'Upload'}". Prüfe ob "Lade Sample ${sample}" Node ausgeführt wurde.`);
}

console.log('✅ Binary gefunden:', Object.keys(binaryData));
console.log('✅ Binary Keys:', Object.keys(binaryData));

// Return Item mit Binary
return [{
    json: {
        ...$json,
        sample: sample,
        source: sample ? `Sample ${sample}` : 'Upload'
    },
    binary: binaryData
}];

