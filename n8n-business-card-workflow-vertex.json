{
  "name": "Business Card Extraction Demo - Vertex AI",
  "nodes": [
    {
      "parameters": {
        "path": "business-card-extraction",
        "options": {
          "responseCode": 200,
          "responseMode": "lastNode"
        },
        "binaryPropertyName": "file"
      },
      "id": "webhook-form",
      "name": "Business Card Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "business-card-extraction",
      "continueOnFail": false,
      "notes": "Form Trigger f√ºr Demo. L√§dt Datei hoch oder nutzt sample=1/2/3 Parameter."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "string": [
            {
              "value1": "={{String($json.query.sample)}}",
              "value2": "",
              "operation": "notEmpty"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "check-sample",
      "name": "Ist Sample?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "string": [
            {
              "value1": "={{String($json.query.sample)}}",
              "value2": "1",
              "operation": "equals"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "check-sample-1",
      "name": "Sample 1?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "string": [
            {
              "value1": "={{String($json.query.sample)}}",
              "value2": "2",
              "operation": "equals"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "check-sample-2",
      "name": "Sample 2?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 420]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "string": [
            {
              "value1": "={{String($json.query.sample)}}",
              "value2": "3",
              "operation": "equals"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "check-sample-3",
      "name": "Sample 3?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 660]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-1.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "load-sample-1",
      "name": "Lade Sample 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 180],
      "notes": "L√§dt Demo-Visitenkarte 1 (Oliver Krause)."
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-2.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "load-sample-2",
      "name": "Lade Sample 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 420],
      "notes": "L√§dt Demo-Visitenkarte 2 (Gabi Gra√ünick)."
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-3.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "load-sample-3",
      "name": "Lade Sample 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [900, 660],
      "notes": "L√§dt Demo-Visitenkarte 3 (Mariana Anderson)."
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// --- Code f√ºr Setze Sample-Info (FINAL) ---\n\n// Detailliertes Logging\nconsole.log('üîç [Setze Sample-Info] Workflow gestartet');\n\nconst sample = $json.query?.sample || '';\nconsole.log('üìù Sample Parameter:', sample || 'Upload');\n\nlet binaryData = null;\n\n// F√ºr Upload: Binary kommt direkt vom Webhook (Business Card Upload)\nif (!sample) {\n    // Wenn kein Sample-Parameter vorhanden ist, muss das Binary aus dem Webhook kommen.\n    try {\n        // Wir nehmen das Binary direkt von der Node, die uns f√ºttert.\n        binaryData = $binary; \n    } catch (e) {\n        console.error('Fehler beim Laden der Binary-Daten vom Webhook:', e);\n    }\n} else {\n    // Samples: Hole Binary vom HTTP Request Node\n    try {\n        let sampleNodeName = null;\n        if (sample === '1') {\n            sampleNodeName = 'Lade Sample 1';\n        } else if (sample === '2') {\n            sampleNodeName = 'Lade Sample 2';\n        } else if (sample === '3') {\n            sampleNodeName = 'Lade Sample 3';\n        }\n        \n        if (sampleNodeName) {\n            // Hole Bin√§rdaten von der korrekten Node\n            const sampleNode = $(sampleNodeName); \n            if (sampleNode && sampleNode.binary) {\n                binaryData = sampleNode.binary;\n            } else if (sampleNode && sampleNode.item && sampleNode.item.binary) {\n                binaryData = sampleNode.item.binary;\n            }\n        }\n    } catch (e) {\n        console.error('Fehler beim Laden der Binary-Daten vom Sample-Node:', e);\n    }\n}\n\n// KRITISCH: Item wird nur weitergegeben, wenn Bin√§rdaten vorhanden sind.\nif (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData || {}).length === 0)) {\n    console.error('‚ùå [Setze Sample-Info] Binary-Daten fehlen! Item wird verworfen.');\n    // Dies erzeugt den \"No item to return was found\" Fehler, ist aber korrekt,\n    // um Item-Verlust zu melden. In diesem Fall wollen wir den Absturz verhindern.\n    return []; \n}\n\nconsole.log('‚úÖ [Setze Sample-Info] Item konsolidiert und weitergegeben.');\n\n// F√ºge Source-Info und Binary hinzu\nreturn [{\n    json: {\n        ...$json, // F√ºge alle vorhandenen Daten hinzu\n        sample: sample,\n        source: sample ? `Sample ${sample}` : 'Upload'\n    },\n    // Binary explizit weitergeben - WICHTIG f√ºr AI Agent!\n    binary: binaryData\n}];"
      },
      "id": "set-sample-info",
      "name": "Setze Sample-Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ `Extrahiere alle Kontaktdaten aus dieser Visitenkarte und gib sie als strukturiertes JSON zur√ºck.\\n\\nSCHRITT 1: Extrahiere alle sichtbaren Daten\\n- name: Vollst√§ndiger Name (Vor- und Nachname)\\n- company: Firma/Unternehmen\\n- email: E-Mail-Adresse (vollst√§ndig mit @)\\n- phone: Haupttelefonnummer (Mobil bevorzugt, mit Vorwahl)\\n- phone_office: B√ºrotelefonnummer (optional, mit Vorwahl)\\n- address: VOLLST√ÑNDIGE Stra√üe und Hausnummer (z.B. \\\"Musterstra√üe 12\\\")\\n- city: Postleitzahl UND Stadt (z.B. \\\"12345 Musterstadt\\\")\\n- website: Website-URL (optional)\\n- job_title: Berufsbezeichnung/Position (optional)\\n\\nSCHRITT 2: VERIFIZIERE UND ERG√ÑNZE DIE DATEN\\n\\n1. INTERNET-RECHERCHE:\\n   - Suche im Internet nach der Person (Name + Firma)\\n   - Pr√ºfe ob Name und Firma zusammenpassen\\n   - Verifiziere ob die Firma existiert\\n   - Pr√ºfe ob E-Mail-Domain zur Firma passt\\n\\n2. PLAUSIBILIT√ÑTSPR√úFUNG:\\n   - Ist die E-Mail-Adresse plausibel? (Format: name@firma.de)\\n   - Passt die Telefonnummer zum Land? (z.B. +49 f√ºr Deutschland)\\n   - Ist die Adresse vollst√§ndig und plausibel?\\n   - Passt die Website zur Firma?\\n\\n3. DATEN-ERG√ÑNZUNG:\\n   - Falls Adresse unvollst√§ndig: Suche nach vollst√§ndiger Adresse der Firma\\n   - Falls PLZ fehlt: Suche PLZ zur Stadt\\n   - Falls Website fehlt aber Firma bekannt: Suche offizielle Website\\n   - Vervollst√§ndige fehlende Kontaktdaten falls m√∂glich\\n\\n4. QUALIT√ÑTSSICHERUNG:\\n   - Markiere unsichere Daten mit Flag (verification_status)\\n   - Verwende nur VERIFIZIERTE Daten wenn m√∂glich\\n   - Wenn Daten widerspr√ºchlich: Verwende die plausibelste Version\\n\\nWICHTIG:\\n- Wenn du Daten im Internet findest, die von der Visitenkarte abweichen, verwende die VERIFIZIERTEN Daten aus dem Internet\\n- Wenn keine Internet-Daten gefunden werden, verwende die Daten von der Visitenkarte\\n- Gib immer an, welche Daten verifiziert wurden (verification_status)\\n\\nGib NUR valides JSON zur√ºck mit ZUS√ÑTZLICHEN Feldern:\\n- verification_status: \\\"verified\\\" (wenn verifiziert), \\\"partial\\\" (wenn teilweise verifiziert), \\\"unverified\\\" (wenn nicht verifiziert)\\n- confidence_score: 0.0-1.0 (Wahrscheinlichkeit dass Daten korrekt sind)\\n\\nBeispiel-Format:\\n{\\\"name\\\": \\\"Max Mustermann\\\", \\\"company\\\": \\\"Beispiel GmbH\\\", \\\"email\\\": \\\"max@beispiel.de\\\", \\\"phone\\\": \\\"+49 123 456789\\\", \\\"address\\\": \\\"Musterstra√üe 12\\\", \\\"city\\\": \\\"12345 Musterstadt\\\", \\\"verification_status\\\": \\\"verified\\\", \\\"confidence_score\\\": 0.95}` }}",
        "options": {
          "systemMessage": "Du bist ein Experte f√ºr Visitenkarten-Extraktion mit Internet-Recherche-F√§higkeiten. Du extrahierst Kontaktdaten aus Bildern, recherchierst im Internet, verifizierst die Daten und erg√§nzt fehlende Informationen. Nutze dein Trainingswissen und logische Plausibilit√§tspr√ºfungen f√ºr die Verifizierung.",
          "automaticallyPassthroughBinaryImages": true
        }
      },
      "id": "ai-agent-vertex",
      "name": "AI Agent - Vertex AI",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [1340, 300],
      "notes": "‚ö†Ô∏è WICHTIG: Konfiguriere unter 'Chat Model' ‚Üí Google Vertex AI Gemini mit deinen Credentials! Der AI Agent Node verarbeitet Binary-Daten direkt - KEIN Base64 n√∂tig!"
    },
    {
      "parameters": {
        "jsCode": "// Parse AI Agent Response (Vertex AI Gemini)\n\n// Detailliertes Logging\nconsole.log('üîç [Parse AI Agent Response] Starte Parsing');\nconsole.log('‚è∞ Zeitstempel:', new Date().toISOString());\nconsole.log('üìã Input Response:', JSON.stringify($json, null, 2));\n\nconst response = $json;\nconst source = $('Setze Sample-Info').item.json.source || 'Upload';\nconst sample = $('Setze Sample-Info').item.json.sample || '';\n\nconsole.log('üìù Metadaten:', { source, sample });\n\n// AI Agent Response Struktur kann variieren:\n// Option 1: Direkt JSON Response\n// Option 2: Text mit JSON\n\nlet extractedData = {};\nlet responseText = '';\n\ntry {\n  // Versuche verschiedene Response-Strukturen\n  if (response.output) {\n    responseText = response.output;\n  } else if (response.chatOutput) {\n    responseText = response.chatOutput;\n  } else if (response.text) {\n    responseText = response.text;\n  } else if (response.message) {\n    responseText = response.message;\n  } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n    // Vertex AI native Format\n    responseText = response.candidates[0].content.parts[0].text;\n  } else if (typeof response === 'string') {\n    responseText = response;\n  } else if (typeof response === 'object' && response.name) {\n    // Bereits strukturiertes JSON\n    extractedData = response;\n  }\n  \n  // Extrahiere JSON aus Text (falls zus√§tzlicher Text vorhanden)\n  if (responseText) {\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n    const jsonString = jsonMatch ? jsonMatch[0] : responseText;\n    extractedData = JSON.parse(jsonString);\n  }\n} catch (error) {\n  // Fallback: Versuche direkt zu parsen\n  if (typeof response === 'object' && !response.candidates) {\n    extractedData = response;\n  } else {\n    console.error('Fehler beim Parsen der AI Agent Response:', error);\n    console.error('Response:', JSON.stringify(response, null, 2));\n    extractedData = {};\n  }\n}\n\n// F√ºge Metadaten hinzu\nconst extractedResult = {\n  json: {\n    name: extractedData.name || '',\n    company: extractedData.company || '',\n    email: extractedData.email || '',\n    phone: extractedData.phone || extractedData.phone_mobile || '',\n    phone_office: extractedData.phone_office || extractedData.phone_b√ºro || '',\n    address: extractedData.address || '',\n    city: extractedData.city || '',\n    website: extractedData.website || extractedData.www || '',\n    job_title: extractedData.job_title || extractedData.position || '',\n    verification_status: extractedData.verification_status || 'unverified',\n    confidence_score: extractedData.confidence_score !== undefined ? extractedData.confidence_score : 0.5,\n    source: source,\n    sample: sample,\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('‚úÖ [Parse AI Agent Response] Extrahiert:', {\n  name: extractedResult.json.name || '(leer)',\n  company: extractedResult.json.company || '(leer)',\n  email: extractedResult.json.email || '(leer)',\n  verification_status: extractedResult.json.verification_status,\n  confidence_score: extractedResult.json.confidence_score\n});\n\nreturn [extractedResult];"
      },
      "id": "parse-vertex-response",
      "name": "Parse AI Agent Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300],
      "notes": "Parst die Vertex AI Gemini Response und extrahiert strukturierte Kontaktdaten"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Formatiere Daten f√ºr die Website\nconst data = $json;\nreturn {\n  json: {\n    type: 'business-card-processed',\n    payload: {\n      name: data.name || '',\n      company: data.company || '',\n      email: data.email || '',\n      phone: data.phone || '',\n      phone_office: data.phone_office || '',\n      address: data.address || '',\n      city: data.city || '',\n      website: data.website || '',\n      job_title: data.job_title || '',\n      verification_status: data.verification_status || 'unverified',\n      confidence_score: data.confidence_score !== undefined ? data.confidence_score : 0.5,\n      source: data.source || 'Upload',\n      sample: data.sample || '',\n      timestamp: data.timestamp || new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "format-response",
      "name": "Formatiere f√ºr Website",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "respond-to-webhook",
      "name": "Antwort an Website",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300],
      "notes": "Sendet Ergebnisse zur√ºck an die Website. Die Website empf√§ngt die Daten via postMessage."
    }
  ],
  "connections": {
    "Business Card Upload": {
      "main": [
        [
          {
            "node": "Ist Sample?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ist Sample?": {
      "main": [
        [
          {
            "node": "Sample 1?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 1?": {
      "main": [
        [
          {
            "node": "Lade Sample 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sample 2?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 2?": {
      "main": [
        [
          {
            "node": "Lade Sample 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sample 3?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 3?": {
      "main": [
        [
          {
            "node": "Lade Sample 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 1": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 2": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 3": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setze Sample-Info": {
      "main": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Vertex AI": {
      "main": [
        [
          {
            "node": "Parse AI Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Agent Response": {
      "main": [
        [
          {
            "node": "Formatiere f√ºr Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatiere f√ºr Website": {
      "main": [
        [
          {
            "node": "Antwort an Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-27T12:00:00.000Z",
  "versionId": "1"
}
