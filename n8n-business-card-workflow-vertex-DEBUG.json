{
  "name": "Business Card Extraction - WITH DEBUG",
  "nodes": [
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "koretex-zugang",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [1536, 1904],
      "id": "72ed7f7b-7d6-4ed2-b679-373842949ee7",
      "name": "Google Vertex Chat Model",
      "credentials": {
        "googleApi": {
          "id": "gJXT6UPYPUx6TpMl",
          "name": "Google Service Account Moritz"
        }
      }
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger (Test)",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [224, 1664],
      "notes": "Manueller Trigger f√ºr Tests. Test-Daten: { \"query\": { \"sample\": \"1\" } }"
    },
    {
      "parameters": {
        "path": "business-card-extraction",
        "responseMode": "lastNode",
        "options": {},
        "binaryPropertyName": "file"
      },
      "id": "12da61f1-9a21-43e6-876d-2aaac089e409",
      "name": "Business Card Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [448, 1664],
      "webhookId": "business-card-extraction"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Route to Sample - KORRIGIERT!\nconst sample = String($json.query?.sample || '').trim();\nconst sampleStr = String(sample).trim();\nlet route = 'upload';\nlet loadSampleNode = null;\n\nif (sampleStr === '1') {\n    route = 'sample-1';\n    loadSampleNode = 'Lade Sample 1';\n} else if (sampleStr === '2') {\n    route = 'sample-2';\n    loadSampleNode = 'Lade Sample 2';\n} else if (sampleStr === '3') {\n    route = 'sample-3';\n    loadSampleNode = 'Lade Sample 3';\n}\n\nreturn [{\n    json: {\n        ...$json,\n        route: route,\n        loadSampleNode: loadSampleNode,\n        sample: sampleStr\n    }\n}];"
      },
      "id": "route-to-sample-code",
      "name": "Route to Sample",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [672, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Debug Node: Route to Sample\nconst input = JSON.parse(JSON.stringify($json));\nconst output = JSON.parse(JSON.stringify($json));\n\nreturn [{\n    json: {\n        ...$json,\n        _debug: {\n            debugNode: \"Route to Sample\",\n            timestamp: new Date().toISOString(),\n            input: input,\n            output: output,\n            hasBinary: !!$binary && Object.keys($binary || {}).length > 0\n        }\n    }\n}];"
      },
      "id": "debug-route-to-sample",
      "name": "üîç Debug: Route to Sample",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [784, 1664]
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {"value1": "={{$json.route}}", "operation": "equals", "value2": "sample-1"},
            {"value1": "={{$json.route}}", "operation": "equals", "value2": "sample-2"},
            {"value1": "={{$json.route}}", "operation": "equals", "value2": "sample-3"}
          ]
        },
        "options": {"fallbackOutput": "extraOutput"}
      },
      "id": "route-to-sample-nodes",
      "name": "Route to Sample Nodes",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [896, 1664]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-1.jpg",
        "options": {"response": {"response": {"responseFormat": "file"}}}
      },
      "id": "a0afa3cd-255e-4f7c-941b-316d6941e547",
      "name": "Lade Sample 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 1536]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-2.jpg",
        "options": {"response": {"response": {"responseFormat": "file"}}}
      },
      "id": "8078e8e0-1405-48bd-be22-1bc6ba3b473c",
      "name": "Lade Sample 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 1776]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-3.jpg",
        "options": {"response": {"response": {"responseFormat": "file"}}}
      },
      "id": "e892bed9-5973-4ebf-bffc-9c85571e2eda",
      "name": "Lade Sample 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 2016]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Setze Sample-Info - Binary-Daten konsolidieren\nconst sample = String($json.query?.sample || '').trim();\nlet binaryData = null;\n\nif ($binary && typeof $binary === 'object') {\n    const keys = Object.keys($binary);\n    if (keys.length > 0) binaryData = $binary;\n}\n\nif (!binaryData && sample) {\n    try {\n        const nodeName = sample === '1' ? 'Lade Sample 1' : sample === '2' ? 'Lade Sample 2' : 'Lade Sample 3';\n        const node = $(nodeName);\n        if (node?.binary) binaryData = node.binary;\n        else if (node?.item?.binary) binaryData = node.item.binary;\n    } catch (e) {}\n}\n\nif (!binaryData && !sample) {\n    try {\n        const webhook = $('Business Card Upload');\n        if (webhook?.binary) binaryData = webhook.binary;\n        else if (webhook?.item?.binary) binaryData = webhook.item.binary;\n    } catch (e) {}\n}\n\nif (!binaryData && $binary) binaryData = $binary;\n\nif (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData).length === 0)) {\n    return [];\n}\n\nreturn [{\n    json: {\n        ...$json,\n        sample: sample,\n        source: sample ? `Sample ${sample}` : 'Upload'\n    },\n    binary: binaryData\n}];"
      },
      "id": "16562d02-ccfb-488a-93ea-25fe823df0da",
      "name": "Setze Sample-Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1344, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Debug Node: Setze Sample-Info\nconst input = JSON.parse(JSON.stringify($json));\nconst hasBinary = !!$binary && Object.keys($binary || {}).length > 0;\nconst binaryInfo = hasBinary ? {\n    binaryKeys: Object.keys($binary || {}),\n    hasData: !!$binary?.data,\n    hasFile: !!$binary?.file\n} : null;\n\nreturn [{\n    json: {\n        ...$json,\n        _debug: {\n            debugNode: \"Setze Sample-Info\",\n            timestamp: new Date().toISOString(),\n            input: input,\n            output: {...$json, binaryInfo: binaryInfo},\n            hasBinary: hasBinary,\n            binaryInfo: binaryInfo,\n            sample: $json.sample || '',\n            source: $json.source || 'Upload'\n        }\n    },\n    binary: $binary\n}];"
      },
      "id": "debug-setze-sample-info",
      "name": "üîç Debug: Setze Sample-Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1456, 1664]
    },
    {
      "parameters": {
        "jsonSchemaExample": "[{\"name\": \"Oliver Krause\", \"job_title\": \"Externer Datenschutzbeauftragter (T√úV Pers. Cert.)\", \"company\": \"DSBOK\", \"phone\": \"+49 160 5384727\", \"phone_office\": \"+49 6144 402197\", \"email\": \"oliver.krause@dsbok.de\", \"website\": \"www.dsbok.de\", \"address\": \"Untergasse 2\", \"city\": \"65474 Bischofsheim\", \"verification_status\": \"verified\", \"confidence_score\": 0.98}]"
      },
      "id": "structured-output-parser",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [1440, 2064]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract all business contact details from this business card image. Return full name, job title, company name, phone number, email address, website, office address, and city/postal code. Verify and complete missing data through logical plausibility checks.",
        "options": {
          "systemMessage": "You are a smart assistant that extracts business contact information from business card images. Your role is to analyze the image, extract relevant details such as full name, job title, company name, phone number, email address, website, office address, and city. Verify data plausibility and complete missing information when possible. Return clean, structured JSON data.",
          "hasOutputParser": true,
          "automaticallyPassthroughBinaryImages": true
        }
      },
      "id": "9eac79e0-e6b6-4b71-ad88-6365e29b73b3",
      "name": "AI Agent - Vertex AI",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [1568, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Debug Node: AI Agent\nconst input = JSON.parse(JSON.stringify($json));\nconst output = JSON.parse(JSON.stringify($json));\nconst hasOutput = !!$json.output && (Array.isArray($json.output) ? $json.output.length > 0 : true);\n\nreturn [{\n    json: {\n        ...$json,\n        _debug: {\n            debugNode: \"AI Agent - Vertex AI\",\n            timestamp: new Date().toISOString(),\n            input: input,\n            output: output,\n            hasOutput: hasOutput,\n            outputType: typeof $json.output,\n            outputIsArray: Array.isArray($json.output),\n            outputLength: Array.isArray($json.output) ? $json.output.length : null\n        }\n    }\n}];"
      },
      "id": "debug-ai-agent",
      "name": "üîç Debug: AI Agent",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Transform Output f√ºr Website\nconst source = $json.source || 'Upload';\nconst sample = $json.sample || '';\nconst contacts = Array.isArray($json.output) ? $json.output : [$json];\n\nconst output = contacts.map(contact => ({\n  json: {\n    type: 'business-card-processed',\n    payload: {\n      name: contact.name || '',\n      company: contact.company || '',\n      email: contact.email || '',\n      phone: contact.phone || contact.phone_mobile || '',\n      phone_office: contact.phone_office || contact.phone_b√ºro || '',\n      address: contact.address || '',\n      city: contact.city || '',\n      website: contact.website || contact.www || '',\n      job_title: contact.job_title || contact.position || '',\n      verification_status: contact.verification_status || 'unverified',\n      confidence_score: contact.confidence_score !== undefined ? contact.confidence_score : 0.5,\n      source: source,\n      sample: sample,\n      timestamp: new Date().toISOString()\n    },\n    _debug: $json._debug || null\n  }\n}));\n\nreturn output;"
      },
      "id": "transform-output",
      "name": "Transform Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1792, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Debug Aggregator - Sammelt alle Debug-Daten\nconst allItems = $input.all();\nconst debugData = [];\n\nfor (const item of allItems) {\n    if (item.json._debug) {\n        debugData.push(item.json._debug);\n    }\n}\n\n// Erstelle HTML-Debug-Output\nlet html = `<!DOCTYPE html><html><head><title>Debug Output</title><style>body{font-family:monospace;padding:20px;background:#f5f5f5;}h1{color:#333;}h2{color:#666;margin-top:20px;border-bottom:2px solid #ddd;padding-bottom:5px;}.error{background:#fee;border-left:4px solid #f00;padding:10px;margin:10px 0;}.success{background:#efe;border-left:4px solid #0f0;padding:10px;margin:10px 0;}pre{background:#fff;padding:15px;border-radius:5px;overflow-x:auto;border:1px solid #ddd;}</style></head><body><h1>üîç Debug Output - Business Card Extraction</h1>`;\n\nif (debugData.length === 0) {\n    html += `<div class=\"error\"><strong>‚ö†Ô∏è Keine Debug-Daten gefunden!</strong></div>`;\n} else {\n    debugData.forEach((debug, index) => {\n        const hasErrors = !debug.hasBinary && debug.debugNode === 'Setze Sample-Info' || !debug.hasOutput && debug.debugNode === 'AI Agent - Vertex AI';\n        html += `<div class=\"${hasErrors ? 'error' : 'success'}\">`;\n        html += `<h2>${index + 1}. ${debug.debugNode} - ${debug.timestamp}</h2>`;\n        html += `<h3>Input:</h3><pre>${JSON.stringify(debug.input, null, 2)}</pre>`;\n        html += `<h3>Output:</h3><pre>${JSON.stringify(debug.output, null, 2)}</pre>`;\n        if (debug.hasBinary !== undefined) {\n            html += `<p><strong>Has Binary:</strong> ${debug.hasBinary ? '‚úÖ' : '‚ùå'}</p>`;\n        }\n        if (debug.binaryInfo) {\n            html += `<p><strong>Binary Info:</strong> ${JSON.stringify(debug.binaryInfo, null, 2)}</p>`;\n        }\n        if (debug.hasOutput !== undefined) {\n            html += `<p><strong>Has Output:</strong> ${debug.hasOutput ? '‚úÖ' : '‚ùå'}</p>`;\n        }\n        html += `</div>`;\n    });\n}\n\nhtml += `</body></html>`;\n\nreturn [{\n    json: {\n        debugSummary: {\n            totalDebugNodes: debugData.length,\n            nodes: debugData.map(d => d.debugNode),\n            hasErrors: debugData.some(d => (!d.hasBinary && d.debugNode === 'Setze Sample-Info') || (!d.hasOutput && d.debugNode === 'AI Agent - Vertex AI')),\n            timestamp: new Date().toISOString()\n        },\n        debugData: debugData\n    },\n    binary: {\n        data: Buffer.from(html).toString('base64'),\n        mimeType: 'text/html',\n        fileName: 'debug-output.html'\n    }\n}];"
      },
      "id": "debug-aggregator",
      "name": "üîç Debug Aggregator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1904, 1664]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "ed3af303-e020-4a2d-a219-475cac685f44",
      "name": "Antwort an Website",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2016, 1664]
    }
  ],
  "connections": {
    "Manual Trigger (Test)": {
      "main": [[{"node": "Route to Sample", "type": "main", "index": 0}]]
    },
    "Google Vertex Chat Model": {
      "ai_languageModel": [[{"node": "AI Agent - Vertex AI", "type": "ai_languageModel", "index": 0}]]
    },
    "Business Card Upload": {
      "main": [[{"node": "Route to Sample", "type": "main", "index": 0}]]
    },
    "Route to Sample": {
      "main": [[{"node": "üîç Debug: Route to Sample", "type": "main", "index": 0}]]
    },
    "üîç Debug: Route to Sample": {
      "main": [[{"node": "Route to Sample Nodes", "type": "main", "index": 0}]]
    },
    "Route to Sample Nodes": {
      "main": [
        [{"node": "Lade Sample 1", "type": "main", "index": 0}],
        [{"node": "Lade Sample 2", "type": "main", "index": 0}],
        [{"node": "Lade Sample 3", "type": "main", "index": 0}],
        [{"node": "Setze Sample-Info", "type": "main", "index": 0}]
      ]
    },
    "Lade Sample 1": {"main": [[{"node": "Setze Sample-Info", "type": "main", "index": 0}]]},
    "Lade Sample 2": {"main": [[{"node": "Setze Sample-Info", "type": "main", "index": 0}]]},
    "Lade Sample 3": {"main": [[{"node": "Setze Sample-Info", "type": "main", "index": 0}]]},
    "Setze Sample-Info": {
      "main": [[{"node": "üîç Debug: Setze Sample-Info", "type": "main", "index": 0}]]
    },
    "üîç Debug: Setze Sample-Info": {
      "main": [[{"node": "AI Agent - Vertex AI", "type": "main", "index": 0}]]
    },
    "Structured Output Parser": {
      "ai_outputParser": [[{"node": "Google Vertex Chat Model", "type": "ai_outputParser", "index": 0}]]
    },
    "AI Agent - Vertex AI": {
      "main": [[{"node": "üîç Debug: AI Agent", "type": "main", "index": 0}]]
    },
    "üîç Debug: AI Agent": {
      "main": [[{"node": "Transform Output", "type": "main", "index": 0}]]
    },
    "Transform Output": {
      "main": [[{"node": "üîç Debug Aggregator", "type": "main", "index": 0}]]
    },
    "üîç Debug Aggregator": {
      "main": [[{"node": "Antwort an Website", "type": "main", "index": 0}]]
    }
  },
  "active": true,
  "settings": {"executionOrder": "v1"}
}

