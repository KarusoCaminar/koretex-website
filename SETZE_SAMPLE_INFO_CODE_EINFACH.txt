// --- Code f√ºr Setze Sample-Info (EINFACH & ROBUST) ---

console.log('üîç [Setze Sample-Info] Start');
console.log('üì¶ $binary vorhanden:', !!$binary);
console.log('üì¶ $json:', JSON.stringify($json, null, 2));

// Sample-Parameter
const sample = String($json.query?.sample || '').trim();
console.log('üìù Sample:', sample || 'Upload');

let binaryData = null;

// STRATEGIE: Nimm IMMER zuerst $binary vom aktuellen Item!
// Das funktioniert, wenn "Lade Sample X" ausgef√ºhrt wurde
if ($binary && typeof $binary === 'object') {
    const binaryKeys = Object.keys($binary);
    if (binaryKeys.length > 0) {
        binaryData = $binary;
        console.log('‚úÖ Binary vom aktuellen Item:', binaryKeys);
    }
}

// Falls $binary leer ist, versuche es von der vorherigen Node zu holen
if (!binaryData) {
    if (!sample) {
        // Upload: Binary vom Webhook
        console.log('üì§ Upload: Hole Binary vom Webhook');
        try {
            const webhook = $('Business Card Upload');
            if (webhook?.binary) {
                binaryData = webhook.binary;
                console.log('‚úÖ Binary vom Webhook');
            } else if (webhook?.item?.binary) {
                binaryData = webhook.item.binary;
                console.log('‚úÖ Binary vom Webhook (item.binary)');
            }
        } catch (e) {
            console.error('‚ùå Fehler:', e.message);
        }
    } else {
        // Sample: Binary von "Lade Sample X"
        console.log('üì• Sample:', sample, '- Hole Binary');
        try {
            let nodeName = null;
            if (sample === '1') nodeName = 'Lade Sample 1';
            else if (sample === '2') nodeName = 'Lade Sample 2';
            else if (sample === '3') nodeName = 'Lade Sample 3';
            
            if (nodeName) {
                const node = $(nodeName);
                if (node?.binary) {
                    binaryData = node.binary;
                    console.log('‚úÖ Binary von', nodeName, '(binary)');
                } else if (node?.item?.binary) {
                    binaryData = node.item.binary;
                    console.log('‚úÖ Binary von', nodeName, '(item.binary)');
                } else if (node?.item?.binary?.data) {
                    binaryData = node.item.binary;
                    console.log('‚úÖ Binary von', nodeName, '(item.binary.data)');
                } else {
                    console.error('‚ùå Node', nodeName, 'hat keine Binary-Daten');
                }
            }
        } catch (e) {
            console.error('‚ùå Fehler:', e.message);
        }
    }
}

// KRITISCH: Pr√ºfe ob Binary vorhanden ist
if (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData).length === 0)) {
    console.error('‚ùå KEINE Binary-Daten gefunden!');
    console.error('üìù Sample:', sample);
    console.error('üì¶ $binary:', $binary);
    console.error('üì¶ binaryData:', binaryData);
    
    // WICHTIG: Return [] statt Error zu werfen - verhindert 500 Error
    // Der Workflow wird einfach beendet, wenn keine Binary-Daten vorhanden sind
    return [];
}

console.log('‚úÖ Binary gefunden:', Object.keys(binaryData));

// Return Item mit Binary
return [{
    json: {
        ...$json,
        sample: sample,
        source: sample ? `Sample ${sample}` : 'Upload'
    },
    binary: binaryData
}];

