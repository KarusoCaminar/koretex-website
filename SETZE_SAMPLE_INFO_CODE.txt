// --- Code f√ºr Setze Sample-Info (FINAL) ---

// Detailliertes Logging
console.log('üîç [Setze Sample-Info] Workflow gestartet');

const sample = $json.query?.sample || '';
console.log('üìù Sample Parameter:', sample || 'Upload');

let binaryData = null;

// F√ºr Upload: Binary kommt direkt vom Webhook (Business Card Upload)
if (!sample) {
    // Wenn kein Sample-Parameter vorhanden ist, muss das Binary aus dem Webhook kommen.
    try {
        // Wir nehmen das Binary direkt von der Node, die uns f√ºttert.
        binaryData = $binary; 
    } catch (e) {
        console.error('Fehler beim Laden der Binary-Daten vom Webhook:', e);
    }
} else {
    // Samples: Hole Binary vom HTTP Request Node
    try {
        let sampleNodeName = null;
        if (sample === '1') {
            sampleNodeName = 'Lade Sample 1';
        } else if (sample === '2') {
            sampleNodeName = 'Lade Sample 2';
        } else if (sample === '3') {
            sampleNodeName = 'Lade Sample 3';
        }
        
        if (sampleNodeName) {
            // Hole Bin√§rdaten von der korrekten Node
            const sampleNode = $(sampleNodeName); 
            if (sampleNode && sampleNode.binary) {
                binaryData = sampleNode.binary;
            } else if (sampleNode && sampleNode.item && sampleNode.item.binary) {
                binaryData = sampleNode.item.binary;
            }
        }
    } catch (e) {
        console.error('Fehler beim Laden der Binary-Daten vom Sample-Node:', e);
    }
}

// KRITISCH: Item wird nur weitergegeben, wenn Bin√§rdaten vorhanden sind.
if (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData || {}).length === 0)) {
    console.error('‚ùå [Setze Sample-Info] Binary-Daten fehlen! Item wird verworfen.');
    // Dies erzeugt den "No item to return was found" Fehler, ist aber korrekt,
    // um Item-Verlust zu melden. In diesem Fall wollen wir den Absturz verhindern.
    return []; 
}

console.log('‚úÖ [Setze Sample-Info] Item konsolidiert und weitergegeben.');

// F√ºge Source-Info und Binary hinzu
return [{
    json: {
        ...$json, // F√ºge alle vorhandenen Daten hinzu
        sample: sample,
        source: sample ? `Sample ${sample}` : 'Upload'
    },
    // Binary explizit weitergeben - WICHTIG f√ºr AI Agent!
    binary: binaryData
}];

