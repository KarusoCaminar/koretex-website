{
  "name": "Business Card Extraction Demo - Vertex AI (FIXED)",
  "nodes": [
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "koretex-zugang",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [1536, 1904],
      "id": "72ed7f7b-7d6-4ed2-b679-373842949ee7",
      "name": "Google Vertex Chat Model",
      "credentials": {
        "googleApi": {
          "id": "gJXT6UPYPUx6TpMl",
          "name": "Google Service Account Moritz"
        }
      }
    },
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Trigger (Test)",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [224, 1664],
      "notes": "Manueller Trigger f√ºr Tests in n8n. Klicke auf 'Execute Workflow' und f√ºge Test-Daten hinzu."
    },
    {
      "parameters": {
        "path": "business-card-extraction",
        "responseMode": "lastNode",
        "options": {},
        "binaryPropertyName": "file"
      },
      "id": "12da61f1-9a21-43e6-876d-2aaac089e409",
      "name": "Business Card Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [448, 1664],
      "webhookId": "business-card-extraction",
      "notesInFlow": false,
      "notes": "Webhook Trigger f√ºr Demo. L√§dt Datei hoch oder nutzt sample=1/2/3 Parameter."
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Route to Sample - KORRIGIERT!\nconst sample = String($json.query?.sample || '').trim();\n\nconsole.log('üîç [Route to Sample] Sample Parameter:', sample);\nconsole.log('üìã Raw query:', $json.query);\n\nconst sampleStr = String(sample).trim();\nlet route = 'upload';\nlet loadSampleNode = null;\n\nif (sampleStr === '1') {\n    route = 'sample-1';\n    loadSampleNode = 'Lade Sample 1';\n    console.log('‚úÖ Route: Sample 1');\n} else if (sampleStr === '2') {\n    route = 'sample-2';\n    loadSampleNode = 'Lade Sample 2';\n    console.log('‚úÖ Route: Sample 2');\n} else if (sampleStr === '3') {\n    route = 'sample-3';\n    loadSampleNode = 'Lade Sample 3';\n    console.log('‚úÖ Route: Sample 3');\n} else {\n    route = 'upload';\n    console.log('‚úÖ Route: Upload (kein Sample)');\n}\n\nreturn [{\n    json: {\n        ...$json,\n        route: route,\n        loadSampleNode: loadSampleNode,\n        sample: sampleStr\n    }\n}];"
      },
      "id": "route-to-sample-code",
      "name": "Route to Sample",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [672, 1664],
      "notes": "F√ºr Tests: Nach 'Manual Trigger' die Test-Daten hinzuf√ºgen. Format: { \"query\": { \"sample\": \"1\" } }"
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "value1": "={{$json.route}}",
              "operation": "equals",
              "value2": "sample-1"
            },
            {
              "value1": "={{$json.route}}",
              "operation": "equals",
              "value2": "sample-2"
            },
            {
              "value1": "={{$json.route}}",
              "operation": "equals",
              "value2": "sample-3"
            }
          ]
        },
        "options": {
          "fallbackOutput": "extraOutput"
        }
      },
      "id": "route-to-sample-nodes",
      "name": "Route to Sample Nodes",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [896, 1664]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-1.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "a0afa3cd-255e-4f7c-941b-316d6941e547",
      "name": "Lade Sample 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 1536]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-2.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "8078e8e0-1405-48bd-be22-1bc6ba3b473c",
      "name": "Lade Sample 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 1776]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-3.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "e892bed9-5973-4ebf-bffc-9c85571e2eda",
      "name": "Lade Sample 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1120, 2016]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Setze Sample-Info - Binary-Daten konsolidieren\nconst sample = String($json.query?.sample || '').trim();\n\nlet binaryData = null;\n\n// 1. $binary vom aktuellen Item\nif ($binary && typeof $binary === 'object') {\n    const keys = Object.keys($binary);\n    if (keys.length > 0) {\n        binaryData = $binary;\n    }\n}\n\n// 2. Sample: Binary von \"Lade Sample X\" Node\nif (!binaryData && sample) {\n    try {\n        const nodeName = sample === '1' ? 'Lade Sample 1' : sample === '2' ? 'Lade Sample 2' : 'Lade Sample 3';\n        const node = $(nodeName);\n        \n        if (node?.binary) binaryData = node.binary;\n        else if (node?.item?.binary) binaryData = node.item.binary;\n        else if (node?.item?.binary?.data) binaryData = node.item.binary;\n        else if (node?.item?.binary?.file) binaryData = { data: node.item.binary.file };\n    } catch (e) {\n        console.error('Fehler beim Holen von Lade Sample:', e);\n    }\n}\n\n// 3. Upload: Binary vom Webhook\nif (!binaryData && !sample) {\n    try {\n        const webhook = $('Business Card Upload');\n        if (webhook?.binary) binaryData = webhook.binary;\n        else if (webhook?.item?.binary) binaryData = webhook.item.binary;\n        else if (webhook?.item?.binary?.data) binaryData = webhook.item.binary;\n        else if (webhook?.item?.binary?.file) binaryData = { data: webhook.item.binary.file };\n    } catch (e) {\n        console.error('Fehler beim Holen vom Webhook:', e);\n    }\n}\n\n// 4. Fallback: $binary\nif (!binaryData && $binary) {\n    binaryData = $binary;\n}\n\n// KRITISCH: Wenn KEINE Binary-Daten ‚Üí RETURN []\nif (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData).length === 0)) {\n    console.error('Binary-Daten fehlen f√ºr Sample:', sample || 'Upload');\n    return [];\n}\n\nreturn [{\n    json: {\n        ...$json,\n        sample: sample,\n        source: sample ? `Sample ${sample}` : 'Upload'\n    },\n    binary: binaryData\n}];"
      },
      "id": "16562d02-ccfb-488a-93ea-25fe823df0da",
      "name": "Setze Sample-Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1344, 1664]
    },
    {
      "parameters": {
        "jsonSchemaExample": "[{\n  \"name\": \"Oliver Krause\",\n  \"job_title\": \"Externer Datenschutzbeauftragter (T√úV Pers. Cert.)\",\n  \"company\": \"DSBOK\",\n  \"phone\": \"+49 160 5384727\",\n  \"phone_office\": \"+49 6144 402197\",\n  \"email\": \"oliver.krause@dsbok.de\",\n  \"website\": \"www.dsbok.de\",\n  \"address\": \"Untergasse 2\",\n  \"city\": \"65474 Bischofsheim\",\n  \"verification_status\": \"verified\",\n  \"confidence_score\": 0.98\n}]"
      },
      "id": "structured-output-parser",
      "name": "Structured Output Parser",
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [1440, 2064]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract all business contact details from this business card image. Return full name, job title, company name, phone number, email address, website, office address, and city/postal code. Verify and complete missing data through logical plausibility checks.",
        "options": {
          "systemMessage": "You are a smart assistant that extracts business contact information from business card images. Your role is to analyze the image, extract relevant details such as full name, job title, company name, phone number, email address, website, office address, and city. Verify data plausibility and complete missing information when possible. Return clean, structured JSON data.",
          "hasOutputParser": true,
          "automaticallyPassthroughBinaryImages": true
        }
      },
      "id": "9eac79e0-e6b6-4b71-ad88-6365e29b73b3",
      "name": "AI Agent - Vertex AI",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [1568, 1664]
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Transform Output f√ºr Website\nconst source = $json.source || 'Upload';\nconst sample = $json.sample || '';\n\n// AI Agent gibt bereits strukturierte Daten zur√ºck (durch Structured Output Parser)\nconst contacts = Array.isArray($json.output) ? $json.output : [$json];\n\nconst output = contacts.map(contact => ({\n  json: {\n    type: 'business-card-processed',\n    payload: {\n      name: contact.name || '',\n      company: contact.company || '',\n      email: contact.email || '',\n      phone: contact.phone || contact.phone_mobile || '',\n      phone_office: contact.phone_office || contact.phone_b√ºro || '',\n      address: contact.address || '',\n      city: contact.city || '',\n      website: contact.website || contact.www || '',\n      job_title: contact.job_title || contact.position || '',\n      verification_status: contact.verification_status || 'unverified',\n      confidence_score: contact.confidence_score !== undefined ? contact.confidence_score : 0.5,\n      source: source,\n      sample: sample,\n      timestamp: new Date().toISOString()\n    }\n  }\n}));\n\nreturn output;"
      },
      "id": "transform-output",
      "name": "Transform Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1792, 1664]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "ed3af303-e020-4a2d-a219-475cac685f44",
      "name": "Antwort an Website",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2016, 1664],
      "notes": "Sendet Ergebnisse zur√ºck an die Website. Die Website empf√§ngt die Daten via JSON Response."
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger (Test)": {
      "main": [
        [
          {
            "node": "Route to Sample",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Vertex Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Business Card Upload": {
      "main": [
        [
          {
            "node": "Route to Sample",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Sample": {
      "main": [
        [
          {
            "node": "Route to Sample Nodes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route to Sample Nodes": {
      "main": [
        [
          {
            "node": "Lade Sample 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lade Sample 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Lade Sample 3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 1": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 2": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 3": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Setze Sample-Info": {
      "main": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Vertex AI": {
      "main": [
        [
          {
            "node": "Transform Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform Output": {
      "main": [
        [
          {
            "node": "Antwort an Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bac47785-09c6-4874-a2b7-07e344161508",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1268d95745fc1c71df26afc09ddd8e6477a2faab952c5e36a37f4654b44d882a"
  }
}

