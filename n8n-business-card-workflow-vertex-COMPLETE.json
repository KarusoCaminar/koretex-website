{
  "name": "Business Card Extraction Demo - Vertex AI",
  "nodes": [
    {
      "parameters": {
        "projectId": {
          "__rl": true,
          "value": "koretex-zugang",
          "mode": "id"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleVertex",
      "typeVersion": 1,
      "position": [
        1536,
        1904
      ],
      "id": "72ed7f7b-7d6-4ed2-b679-373842949ee7",
      "name": "Google Vertex Chat Model",
      "credentials": {
        "googleApi": {
          "id": "gJXT6UPYPUx6TpMl",
          "name": "Google Service Account Moritz"
        }
      }
    },
    {
      "parameters": {
        "path": "business-card-extraction",
        "responseMode": "lastNode",
        "options": {},
        "binaryPropertyName": "file"
      },
      "id": "12da61f1-9a21-43e6-876d-2aaac089e409",
      "name": "Business Card Upload",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        448,
        1664
      ],
      "webhookId": "business-card-extraction",
      "notesInFlow": false,
      "notes": "Form Trigger für Demo. Lädt Datei hoch oder nutzt sample=1/2/3 Parameter."
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "9283215e-b7ce-49fe-879d-0eefdb2ba41e",
              "leftValue": "={{$json.query.sample}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "name": "filter.operator.notEmpty"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "77695917-ca49-445f-8bc5-8d94428d9e09",
      "name": "Ist Sample?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        672,
        1664
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "3bba7778-59de-4b78-a054-4674ba0b2438",
              "leftValue": "={{$json.query.sample}}",
              "rightValue": "={{ \"1\" }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "ee5bfd58-fa09-4d40-9723-cfe3d2e256aa",
      "name": "Sample 1?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        1536
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "ee8f42c2-253f-474c-a3f9-868906a57390",
              "leftValue": "={{$json.query.sample}}",
              "rightValue": "={{ \"2\" }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "1a32701a-48f6-4b52-a1fd-8b2298402665",
      "name": "Sample 2?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        1776
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 1
          },
          "conditions": [
            {
              "id": "5479d246-c283-4286-b903-4e312a617d95",
              "leftValue": "={{$json.query.sample}}",
              "rightValue": "={{ \"3\" }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "7334c0d1-a739-4337-8c26-8aa9033fea61",
      "name": "Sample 3?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        880,
        2016
      ]
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-1.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "a0afa3cd-255e-4f7c-941b-316d6941e547",
      "name": "Lade Sample 1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1104,
        1536
      ],
      "notes": "Lädt Demo-Visitenkarte 1 (Oliver Krause)."
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-2.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "8078e8e0-1405-48bd-be22-1bc6ba3b473c",
      "name": "Lade Sample 2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1104,
        1776
      ],
      "notes": "Lädt Demo-Visitenkarte 2 (Gabi Graßnick)."
    },
    {
      "parameters": {
        "url": "https://karusocaminar.github.io/kortex-website/samples/bc-3.jpg",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "id": "e892bed9-5973-4ebf-bffc-9c85571e2eda",
      "name": "Lade Sample 3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1104,
        2016
      ],
      "notes": "Lädt Demo-Visitenkarte 3 (Mariana Anderson)."
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// --- Code für Setze Sample-Info (FINAL - CRASH-PROOF) ---\n\nconst sample = String($json.query?.sample || '').trim();\n\nlet binaryData = null;\n\n// 1. $binary vom aktuellen Item\nif ($binary && typeof $binary === 'object') {\n    const keys = Object.keys($binary);\n    if (keys.length > 0) {\n        binaryData = $binary;\n    }\n}\n\n// 2. Sample: Binary von \"Lade Sample X\" Node\nif (!binaryData && sample) {\n    try {\n        const nodeName = sample === '1' ? 'Lade Sample 1' : sample === '2' ? 'Lade Sample 2' : 'Lade Sample 3';\n        const node = $(nodeName);\n        \n        if (node?.binary) binaryData = node.binary;\n        else if (node?.item?.binary) binaryData = node.item.binary;\n        else if (node?.item?.binary?.data) binaryData = node.item.binary;\n        else if (node?.item?.binary?.file) binaryData = { data: node.item.binary.file };\n    } catch (e) {\n        console.error('Fehler beim Holen von Lade Sample:', e);\n    }\n}\n\n// 3. Upload: Binary vom Webhook\nif (!binaryData && !sample) {\n    try {\n        const webhook = $('Business Card Upload');\n        if (webhook?.binary) binaryData = webhook.binary;\n        else if (webhook?.item?.binary) binaryData = webhook.item.binary;\n        else if (webhook?.item?.binary?.data) binaryData = webhook.item.binary;\n        else if (webhook?.item?.binary?.file) binaryData = { data: webhook.item.binary.file };\n    } catch (e) {\n        console.error('Fehler beim Holen vom Webhook:', e);\n    }\n}\n\n// 4. Fallback: $binary\nif (!binaryData && $binary) {\n    binaryData = $binary;\n}\n\n// KRITISCH: Wenn KEINE Binary-Daten → RETURN [] statt Error (verhindert 500 Error!)\nif (!binaryData || (typeof binaryData === 'object' && Object.keys(binaryData).length === 0)) {\n    console.error('Binary-Daten fehlen für Sample:', sample || 'Upload');\n    // RETURN [] statt Error werfen - verhindert 500 Error!\n    return [];\n}\n\n// RETURN: Item mit Binary\nreturn [{\n    json: {\n        ...$json,\n        sample: sample,\n        source: sample ? `Sample ${sample}` : 'Upload'\n    },\n    binary: binaryData\n}];"
      },
      "id": "16562d02-ccfb-488a-93ea-25fe823df0da",
      "name": "Setze Sample-Info",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        1664
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ `Extrahiere alle Kontaktdaten aus dieser Visitenkarte und gib sie als strukturiertes JSON zurück.\\n\\nSCHRITT 1: Extrahiere alle sichtbaren Daten\\n- name: Vollständiger Name (Vor- und Nachname)\\n- company: Firma/Unternehmen\\n- email: E-Mail-Adresse (vollständig mit @)\\n- phone: Haupttelefonnummer (Mobil bevorzugt, mit Vorwahl)\\n- phone_office: Bürotelefonnummer (optional, mit Vorwahl)\\n- address: VOLLSTÄNDIGE Straße und Hausnummer (z.B. \\\"Musterstraße 12\\\")\\n- city: Postleitzahl UND Stadt (z.B. \\\"12345 Musterstadt\\\")\\n- website: Website-URL (optional)\\n- job_title: Berufsbezeichnung/Position (optional)\\n\\nSCHRITT 2: VERIFIZIERE UND ERGÄNZE DIE DATEN\\n\\n1. INTERNET-RECHERCHE:\\n   - Suche im Internet nach der Person (Name + Firma)\\n   - Prüfe ob Name und Firma zusammenpassen\\n   - Verifiziere ob die Firma existiert\\n   - Prüfe ob E-Mail-Domain zur Firma passt\\n\\n2. PLAUSIBILITÄTSPRÜFUNG:\\n   - Ist die E-Mail-Adresse plausibel? (Format: name@firma.de)\\n   - Passt die Telefonnummer zum Land? (z.B. +49 für Deutschland)\\n   - Ist die Adresse vollständig und plausibel?\\n   - Passt die Website zur Firma?\\n\\n3. DATEN-ERGÄNZUNG:\\n   - Falls Adresse unvollständig: Suche nach vollständiger Adresse der Firma\\n   - Falls PLZ fehlt: Suche PLZ zur Stadt\\n   - Falls Website fehlt aber Firma bekannt: Suche offizielle Website\\n   - Vervollständige fehlende Kontaktdaten falls möglich\\n\\n4. QUALITÄTSSICHERUNG:\\n   - Markiere unsichere Daten mit Flag (verification_status)\\n   - Verwende nur VERIFIZIERTE Daten wenn möglich\\n   - Wenn Daten widersprüchlich: Verwende die plausibelste Version\\n\\nWICHTIG:\\n- Wenn du Daten im Internet findest, die von der Visitenkarte abweichen, verwende die VERIFIZIERTEN Daten aus dem Internet\\n- Wenn keine Internet-Daten gefunden werden, verwende die Daten von der Visitenkarte\\n- Gib immer an, welche Daten verifiziert wurden (verification_status)\\n\\nGib NUR valides JSON zurück mit ZUSÄTZLICHEN Feldern:\\n- verification_status: \\\"verified\\\" (wenn verifiziert), \\\"partial\\\" (wenn teilweise verifiziert), \\\"unverified\\\" (wenn nicht verifiziert)\\n- confidence_score: 0.0-1.0 (Wahrscheinlichkeit dass Daten korrekt sind)\\n\\nBeispiel-Format:\\n{\\\"name\\\": \\\"Max Mustermann\\\", \\\"company\\\": \\\"Beispiel GmbH\\\", \\\"email\\\": \\\"max@beispiel.de\\\", \\\"phone\\\": \\\"+49 123 456789\\\", \\\"address\\\": \\\"Musterstraße 12\\\", \\\"city\\\": \\\"12345 Musterstadt\\\", \\\"verification_status\\\": \\\"verified\\\", \\\"confidence_score\\\": 0.95}` }}",
        "options": {
          "systemMessage": "Du bist ein Experte für Visitenkarten-Extraktion mit Internet-Recherche-Fähigkeiten. Du extrahierst Kontaktdaten aus Bildern, recherchierst im Internet, verifizierst die Daten und ergänzt fehlende Informationen. Nutze dein Trainingswissen und logische Plausibilitätsprüfungen für die Verifizierung.",
          "automaticallyPassthroughBinaryImages": true
        }
      },
      "id": "9eac79e0-e6b6-4b71-ad88-6365e29b73b3",
      "name": "AI Agent - Vertex AI",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1552,
        1664
      ],
      "notes": "⚠️ WICHTIG: Konfiguriere unter 'Chat Model' → Google Vertex AI Gemini mit deinen Credentials! Der AI Agent Node verarbeitet Binary-Daten direkt - KEIN Base64 nötig!"
    },
    {
      "parameters": {
        "jsCode": "// Parse AI Agent Response (Vertex AI Gemini)\n\n// Detailliertes Logging\nconsole.log('🔍 [Parse AI Agent Response] Starte Parsing');\nconsole.log('⏰ Zeitstempel:', new Date().toISOString());\nconsole.log('📋 Input Response:', JSON.stringify($json, null, 2));\n\nconst response = $json;\nconst source = $('Setze Sample-Info').item.json.source || 'Upload';\nconst sample = $('Setze Sample-Info').item.json.sample || '';\n\nconsole.log('📝 Metadaten:', { source, sample });\n\n// AI Agent Response Struktur kann variieren:\n// Option 1: Direkt JSON Response\n// Option 2: Text mit JSON\n\nlet extractedData = {};\nlet responseText = '';\n\ntry {\n  // Versuche verschiedene Response-Strukturen\n  if (response.output) {\n    responseText = response.output;\n  } else if (response.chatOutput) {\n    responseText = response.chatOutput;\n  } else if (response.text) {\n    responseText = response.text;\n  } else if (response.message) {\n    responseText = response.message;\n  } else if (response.candidates?.[0]?.content?.parts?.[0]?.text) {\n    // Vertex AI native Format\n    responseText = response.candidates[0].content.parts[0].text;\n  } else if (typeof response === 'string') {\n    responseText = response;\n  } else if (typeof response === 'object' && response.name) {\n    // Bereits strukturiertes JSON\n    extractedData = response;\n  }\n  \n  // Extrahiere JSON aus Text (falls zusätzlicher Text vorhanden)\n  if (responseText) {\n    const jsonMatch = responseText.match(/\\{[\\s\\S]*\\}/);\n    const jsonString = jsonMatch ? jsonMatch[0] : responseText;\n    extractedData = JSON.parse(jsonString);\n  }\n} catch (error) {\n  // Fallback: Versuche direkt zu parsen\n  if (typeof response === 'object' && !response.candidates) {\n    extractedData = response;\n  } else {\n    console.error('Fehler beim Parsen der AI Agent Response:', error);\n    console.error('Response:', JSON.stringify(response, null, 2));\n    extractedData = {};\n  }\n}\n\n// Füge Metadaten hinzu\nconst extractedResult = {\n  json: {\n    name: extractedData.name || '',\n    company: extractedData.company || '',\n    email: extractedData.email || '',\n    phone: extractedData.phone || extractedData.phone_mobile || '',\n    phone_office: extractedData.phone_office || extractedData.phone_büro || '',\n    address: extractedData.address || '',\n    city: extractedData.city || '',\n    website: extractedData.website || extractedData.www || '',\n    job_title: extractedData.job_title || extractedData.position || '',\n    verification_status: extractedData.verification_status || 'unverified',\n    confidence_score: extractedData.confidence_score !== undefined ? extractedData.confidence_score : 0.5,\n    source: source,\n    sample: sample,\n    timestamp: new Date().toISOString()\n  }\n};\n\nconsole.log('✅ [Parse AI Agent Response] Extrahiert:', {\n  name: extractedResult.json.name || '(leer)',\n  company: extractedResult.json.company || '(leer)',\n  email: extractedResult.json.email || '(leer)',\n  verification_status: extractedResult.json.verification_status,\n  confidence_score: extractedResult.json.confidence_score\n});\n\nreturn [extractedResult];"
      },
      "id": "03f11110-dfe6-4719-9c22-2eecf9f0d7be",
      "name": "Parse AI Agent Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1760,
        1664
      ],
      "notes": "Parst die Vertex AI Gemini Response und extrahiert strukturierte Kontaktdaten"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Formatiere Daten für die Website\nconst data = $json;\nreturn {\n  json: {\n    type: 'business-card-processed',\n    payload: {\n      name: data.name || '',\n      company: data.company || '',\n      email: data.email || '',\n      phone: data.phone || '',\n      phone_office: data.phone_office || '',\n      address: data.address || '',\n      city: data.city || '',\n      website: data.website || '',\n      job_title: data.job_title || '',\n      verification_status: data.verification_status || 'unverified',\n      confidence_score: data.confidence_score !== undefined ? data.confidence_score : 0.5,\n      source: data.source || 'Upload',\n      sample: data.sample || '',\n      timestamp: data.timestamp || new Date().toISOString()\n    }\n  }\n};"
      },
      "id": "9ee768fe-1f71-453c-88be-c2e300d0c004",
      "name": "Formatiere für Website",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1984,
        1664
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{$json}}",
        "options": {}
      },
      "id": "ed3af303-e020-4a2d-a219-475cac685f44",
      "name": "Antwort an Website",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        2208,
        1664
      ],
      "notes": "Sendet Ergebnisse zurück an die Website. Die Website empfängt die Daten via postMessage."
    }
  ],
  "pinData": {},
  "connections": {
    "Google Vertex Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Business Card Upload": {
      "main": [
        [
          {
            "node": "Ist Sample?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ist Sample?": {
      "main": [
        [
          {
            "node": "Sample 1?",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 1?": {
      "main": [
        [
          {
            "node": "Lade Sample 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sample 2?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 2?": {
      "main": [
        [
          {
            "node": "Lade Sample 2",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sample 3?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sample 3?": {
      "main": [
        [
          {
            "node": "Lade Sample 3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 1": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 2": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lade Sample 3": {
      "main": [
        [
          {
            "node": "Setze Sample-Info",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setze Sample-Info": {
      "main": [
        [
          {
            "node": "AI Agent - Vertex AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent - Vertex AI": {
      "main": [
        [
          {
            "node": "Parse AI Agent Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse AI Agent Response": {
      "main": [
        [
          {
            "node": "Formatiere für Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatiere für Website": {
      "main": [
        [
          {
            "node": "Antwort an Website",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "bac47785-09c6-4874-a2b7-07e344161508",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1268d95745fc1c71df26afc09ddd8e6477a2faab952c5e36a37f4654b44d882a"
  },
  "id": "JkdKPm27OWy93nU5",
  "tags": []
}

